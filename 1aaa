import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint


def model(state, t, control_input, k, c, m):
    
    x, x_dot = state
    x_dot_dot = (-k * x - c * x_dot + control_input) / m
    return [x_dot, x_dot_dot]

def expected_trajectory(t, A, t_max):
    if t < t_max / 3:
        return A * t
    elif t < 2 * t_max / 3:
        return A * t_max / 3
    else:
        return -A * (t - 2 * t_max / 3) + A * t_max / 3

class PIDController:
    def __init__(self, kp, ki, kd):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.prev_error = 0
        self.integral = 0

    def output(self, error, dt):
        self.integral += error * dt
        derivative = (error - self.prev_error) / dt
        output = self.kp * error + self.ki * self.integral + self.kd * derivative
        self.prev_error = error
        return output


def control_loop(model, PIDController, total_time, dt, A, t_max, k, c, m):
   
    state = [0.0, 0.0]
   
    t = np.arange(0, total_time, dt)
   
    reference_trajectory = [expected_trajectory(ti, A, t_max) for ti in t]
    actual_trajectory = [state[0]]
   
    for i in range(len(t)-1):
       
        error = reference_trajectory[i] - state[0]  
       
        control_output = PIDController.output(error, dt)
        
        state = odeint(model, state, [t[i], t[i+1]], args=(control_output, k, c, m))[1]
        actual_trajectory.append(state[0])
        
    return t, reference_trajectory, actual_trajectory


def plot_trajectory(t, reference_trajectory, actual_trajectory):
    plt.figure()
    plt.plot(t, reference_trajectory, label='Reference Trajectory')
    plt.plot(t, actual_trajectory, label='Actual Trajectory')
    plt.xlabel('Time')
    plt.ylabel('Position')
    plt.title('Reference vs Actual Trajectory')
    plt.legend()
    plt.grid(True)
    plt.show()

# main
if __name__ == "__main__":
    
    initial_state = np.array([0.0, 0.0])
    
    kp = 5.0
    ki = 0.1
    kd = 0.05
   
    controller = PIDController(kp, ki, kd)
   
    total_time = 50.0
    dt = 0.01
   
    A = 1.0
    t_max = total_time 
    
    k = 1.0  
    c = 0.1  
    m = 1.0  
 
    t, reference_trajectory, actual_trajectory = control_loop(kinematic_system, controller, total_time, dt, A, t_max, k, c, m)

    plot_trajectory(t, reference_trajectory, actual_trajectory)
plt.show()
