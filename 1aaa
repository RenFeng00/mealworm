import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

class PIDController:
    def __init__(self, Kcr, Tcr, dt):
        self.Kp = 0.6 * Kcr
        self.Ki = 2 * self.Kp / Tcr * dt  # Integral term discretized
        self.Kd = self.Kp * Tcr / 8 / dt  # Derivative term discretized
        
        self.integral = np.float64(0)
        self.last_error = np.float64(0)
        self.last_output = np.float64(0)
        self.error_log = []

    def update(self, error, dt):
        self.integral += error * dt
        derivative = (error - self.last_error) / dt
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.last_error = error
        return output

def complex_trajectory(t, A, B, f, phase_shift, t_max):
    if t < t_max / 3:
        return A * t
    elif t < 2 * t_max / 3:
        return A * t_max / 3
    else:
        return -A * (t - 2 * t_max / 3) + A * t_max / 3

def model(t, y, pid, A, B, f, phase_shift, t_max, dt):
    x, x_dot = y
    y_d = complex_trajectory(t, A, B, f, phase_shift, t_max)
    error = y_d - x
    u_pid = pid.update(error, dt)
    dxdt = x_dot
    dx_dot_dt = (-k * x - c * x_dot + u_pid) / m
    return [dxdt, dx_dot_dt]

# System and PID parameters initialization
m = 0.1  # mass
c = 20.0  # damping coefficient
k = 0.01  # spring constant
Kcr, Tcr = 200, 2  # Assumed critical gain and oscillation period
dt = 0.01  # Time step for numerical simulation

# Trajectory and simulation settings
A, B, f, phase_shift, t_max = 1.0, 0, 0.5, 0, 100
t_span = [0, t_max]

# Create a PID controller instance with Ziegler-Nichols parameters
pid = PIDController(Kcr, Tcr, dt)

# Solve ODE
y0 = [0, 0]  # Initial conditions
sol = solve_ivp(lambda t, y: model(t, y, pid, A, B, f, phase_shift, t_max, dt), t_span, y0, t_eval=np.linspace(t_span[0], t_span[1], int(t_max/dt)))

# Calculate desired trajectory for comparison
traj = [complex_trajectory(t, A, B, f, phase_shift, t_max) for t in sol.t]
errors = [desired - actual for desired, actual in zip(traj, sol.y[0])]

# Plot results
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(sol.t, sol.y[0], label='Actual Path')
plt.plot(sol.t, traj, label='Desired Path', linestyle='--')
plt.title('Actual vs Desired Path')
plt.xlabel('Time (s)')
plt.ylabel('Position')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(sol.t, errors, label='Tracking Error')
plt.title('Error Over Time')
plt.xlabel('Time (s)')
plt.ylabel('Error')
plt.legend()

plt.tight_layout()
plt.show()
